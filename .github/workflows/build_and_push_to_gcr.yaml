on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      image_tag:
       required: true
       type: string
      prd_image_build:
        required: true
        type: boolean
        default: false
      stg_image_build:
        required: true
        type: boolean
        default: false
    secrets:
      STAGING_GCR_SA:
        required: true
      PRODUCTION_GCR_SA:
        required: true
      SLACK_WEBHOOK:
        required: true

env:
  STAGING_GCR_PROJECT: noted-handler-353112
  PRODUCTION_GCR_PROJECT: production-353113
  SLACK_CHANNEL: sre-bots
  SLACK_USERNAME: SRE Image Builder
  SLACK_ICON_SUCCESS: ":shamrock:"
  SLACK_ICON_FAILURE: ":no_entry:"
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  PRODUCTION_IMAGE: "gcr.io/$PRODUCTION_GCR_PROJECT/${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}"


jobs:
  build_staging:
   if: ${{ github.event.inputs.stg_image_build }} == 'true'
   runs-on: ubuntu-latest

   steps:

    - name: checkout the project
      uses: actions/checkout@v2

    - name: set up buildx
      uses: docker/setup-buildx-action@v2

    - name: set up gcloud
      uses: google-github-actions/setup-gcloud@v0.6.0

    - name: base64 encode the staging gcr sa
      id: base64-staging-gcr
      shell: bash
      run:
        echo "::set-output name=STAGING_GCR_SA_BASE64::$(echo -en '${{ secrets.STAGING_GCR_SA }}' | python -m base64 -e)"

    - name: echo the key
      shell: bash
      run: echo "${{ steps.base64-staging-gcr.outputs.STAGING_GCR_SA_BASE64 }}"

    - name: build and push to staging gcr
      id: stg_img_build
      uses: RafikFarhad/push-to-gcr-github-action@v4
      with:
        gcloud_service_key: "${{ steps.base64-staging-gcr.outputs.STAGING_GCR_SA_BASE64 }}"
        registry: gcr.io
        project_id: $STAGING_GCR_PROJECT
        image_name: ${{ github.event.inputs.image_name }}
        image_tag:  ${{ github.event.inputs.image_tag }}


  slack_staging_success:
    needs: build_staging
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    env:
      STAGING_IMAGE: "gcr.io/${{ env.STAGING_GCR_PROJECT }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"

    
    steps:
      
    - name: slack success for staging
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_ICON: $SLACK_ICON_SUCCESS
        SLACK_COLOR: green
        SLACK_MESSAGE: "STAGING image ${{ env.STAGING_IMAGE }} was built / pushed with SUCCESS"

      
  slack_staging_failure:
    needs: build_staging
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    env:
      STAGING_IMAGE: "gcr.io/${{ env.STAGING_GCR_PROJECT }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"

    
    
    steps:
      
    - name: slack failure for staging
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_ICON: $SLACK_ICON_FAILURE
        SLACK_COLOR: red
        SLACK_MESSAGE: "STAGING image ${{ env.STAGING_IMAGE }} failed to be built / pushed"

  build_production:
   if: ${{ github.event.inputs.prd_image_build }} == 'true'
   runs-on: ubuntu-latest

   steps:

    - name: checkout the project
      uses: actions/checkout@v2

    - name: set up buildx
      uses: docker/setup-buildx-action@v2

    - name: set up gcloud
      uses: google-github-actions/setup-gcloud@v0.6.0
    
    - name: build and push to production gcr
      id: prd_img_build
      uses: RafikFarhad/push-to-gcr-github-action@v4
      with:
        gcloud_service_key: ${{ secrets.PRODUCTION_GCR_SA }}
        registry: gcr.io
        project_id: $PRODUCTION_GCR_PROJECT
        image_name: ${{ github.event.inputs.image_name }}
        image_tag:  ${{ github.event.inputs.image_tag }}

  slack_production_success:
    needs: build_production
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    
    steps:
      
    - name: slack success for production
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_ICON: $SLACK_ICON_SUCCESS
        SLACK_COLOR: green
        SLACK_MESSAGE: "PRODUCTION image ${{ env.PRODUCTION_IMAGE }} was built / pushed with SUCCESS"
      
  slack_production_failure:
    needs: build_production
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    
    steps:
      
    - name: slack failure for production
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_ICON: $SLACK_ICON_FAILURE
        SLACK_COLOR: red
        SLACK_MESSAGE: "PRODUCTION image ${{ env.PRODUCTION_IMAGE }} failed to be built / pushed"